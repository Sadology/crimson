#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const child_process_1 = require("child_process");
const commander_1 = require("commander");
const package_json_1 = __importDefault(require("../package.json"));
const commander = new commander_1.Command();
commander
    .version(package_json_1.default.version)
    .option('-g --global', 'upgrade packages globally', false)
    .option('-i --ignore-scripts', 'ignore postinstall script', false)
    .parse(process.argv);
const logError = (message) => {
    console.log('\x1b[31m', '[Error]:', message);
};
const logInfo = (message) => {
    console.log('\x1b[34m', '[Start]:', message);
};
const logSuccess = (message) => {
    console.log('\x1b[32m', '[Done]:', message);
};
let packagePath = null;
let global = '';
if (commander.global) {
    global = ' global';
    packagePath = (0, path_1.resolve)(process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'], '.config', 'yarn', 'global', 'package.json');
}
else {
    packagePath = (0, path_1.resolve)(process.cwd(), 'package.json');
}
let params = '';
if (commander.ignoreScripts) {
    params += ' --ignore-scripts';
}
if (!(0, fs_1.existsSync)(packagePath)) {
    logError('Cannot find package.json file in the current directory');
    process.exit(1);
}
const packageJson = require(packagePath);
const options = {
    dependencies: '',
    devDependencies: ' --dev',
    peerDependencies: ' --peer',
};
let ignorePkgs = [];
if (packageJson['yarn-upgrade-all'] && packageJson['yarn-upgrade-all'].ignore) {
    ignorePkgs = packageJson['yarn-upgrade-all'].ignore;
}
/**
 * @Gorniaky - you don't need to uninstall packages to update them. Now updates much faster.
 */
for (const element of ['dependencies', 'devDependencies', 'peerDependencies']) {
    if (!packageJson[element]) {
        continue;
    }
    const option = options[element];
    const packages = Object.keys(packageJson[element]);
    let command = `yarn${global} add${option}`;
    for (const pkg of packages) {
        if (ignorePkgs.indexOf(pkg) > -1) {
            continue;
        }
        command = `${command} ${pkg}`;
    }
    command = `${command} ${params}`;
    try {
        logInfo(command);
        (0, child_process_1.execSync)(command, { stdio: [] });
        logSuccess(command);
    }
    catch (e) {
        logError(`${command} - ${e}`);
    }
}
//# sourceMappingURL=index.js.map